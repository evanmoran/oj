
modules = require './modules'
_ = modules._

siteCSS = require './_styles'
_template = require './_template'

{renderTOC, renderContent, renderProperties:properties, renderMethods:methods, renderEvents:events, renderInherits:inherits, renderOptions:options, renderArguments:arguments_,renderName:name} = require './_content'

md = markdown

module.exports = ->

  _template

    title: 'Learn OJ - Unified templating'

    styles: [
      'reset.css'
      'gg.css'

    ]
    scripts: [
      'jquery.js'
      'jquery.event.drag.js'
      'jquery.ba-resize.min.js'
      'underscore.js'
      'backbone.js'
      'coffee-script.js'
      'ace/ace.js'
    ]

    content: ->
      renderContent data

    toc: ->
      renderTOC data

data = [

  h: 'What is OJ?', id: 'what-is-oj', d: ->
      md """
        OJ is a JavaScript library with the goal to make objects that **create** and **live edit** the web. So this [BulletList](docs.html#BulletList) object creates itself and then lets you manipulate it:
      """

      TryEditor js:"""
        var myList = oj.BulletList(
          'Push',
          'The',
          'Button...'
        );

        oj.Button('Push me!', {
          click:function(){
            myList.add('Nice!')
        }});
      """, cs:"""
        myList = oj.BulletList(
          'Push'
          'The'
          'Button...'
        )

        oj.Button 'Push me!', click: ->
          myList.add 'Nice!'
      """
      md """
        **IMPORTANT:** Did you click the button yet? =). All the editors live compile OJ. Click stuff, and change the code to see what happens!
      """

    items: [

      h: 'What just happened?', id: 'what-happened', d: ->

        md """
          When making a website you have to keep in mind HTML, CSS, and JavaScript code. In OJ, all three parts are unified into objects. OJ can render to HTML and CSS as well as bind JavaScript events.

          The benefit is that OJ objects have **no dependencies**. There is no need to read the docs to be sure the HTML is correct, or see if the CSS is included. *Everything just works.*

          Allow me to demonstrate: In this example, the [oj.Button](docs.html#Button) generates its own `<button>` tag, and then once created binds a JavaScript click event:
        """

        TryEditor js: """
          // Create html
          Button('Click me!', {
            // Bind click event
            click:function(){alert('Woot!');}
          });

          // Create css
          css({button:{color:'red'}})
        """, cs: """
          # Create html
          Button 'Click me!',
            # Bind click event
            click: ->
              alert 'Woot!'
          });

          # Create css
          css button: color:'red'
        """
    ,
      h: 'What else can it do?', id: 'what-else', d: ->
        md """
          Included in `oj.js` are the built-in objects that are the basic building blocks of the web. These include creation and manipulation of the common `<html>` elements:

          * [TextBox](docs.html#TextBox) abstracts `<input type='text'>`
          * [TextArea](docs.html#TextArea) abstracts `<textarea>`
          * [ListBox](docs.html#ListBox) abstracts `<select> and <option>`
          * [CheckBox](docs.html#CheckBox) abstracts `<input type='checkbox'>`
          * [Button](docs.html#Button) abstracts `<button>`
          * [NumberList](docs.html#NumberList) abstracts `<ol> and <li>`
          * [BulletList](docs.html#BulletList) abstracts `<ul>` and `<li>`
          * [Table](docs.html#Table) abstracts `<table>`,`<tr>`,`<td>`, `<tbody>`, and more.

          Once you are comfortable using those, take a look at the objects that come with [OJ plugins](plugins.html). The whole point of OJ is to make creating these objects as easy as possible

          (Check out [createType](docs.html#createType) if you want to learn more about how they are made).
        """
    ,
      h: 'How do I start?', id: 'how-to-start', d: ->

        md """
          Head to the [download page](download.html), and get going by downloading `oj.js` and any of the plugins currently available.

          For inspiration, take a look at some [example projects](download.html#examples) that use OJ client-side or on the command-line.
        """
    ,
      h: 'Do I need jQuery?', id: 'jquery-dependency', d: ->

        md """
          Yes, jQuery 2.0 is a required dependency of OJ. This is how OJ supports event binding and direct DOM manipulation as objects change. Including this dependency took some soul searching, but OJ lives and breaths DOM creation and manipulation, and that is what jQuery does best.

          As for why 2.0 -- this is the version of jQuery made for "modern" browsers, specifically IE9 and above that support the more recent features of JavaScript, HTML5, and CSS3. This browser version requirement also holds for OJ.
        """
    ]
 ,
  h: 'The Basics', id: 'the-basics', d: ->
    md """
      Let's start from the beginning and see how OJ objects are made.
    """
  items: [
      h: 'Creating HTML', id: 'creating-html', d: ->

        md """
          Every html `<tag>` has an analogous tag function by the same name. For example, `<div>` has `oj.div`:
        """
        TryEditor lineCount:2, js: """
            div('This is a div');
          """, cs: """
            div 'This is a div'
          """

        md """Attributes are created by passing objects as arguments. This example defines an `href` attribute on an anchor tag:"""
        TryEditor js: """
            a('Link to oj.js',
              {href: 'http://ojjs.org'});
          """, cs:"""
            a 'Link to oj.js',
              href: 'http://ojjs.org'
          """

        md """Order doesn't matter for attributes; add as many as you need, and the attribute objects will be unioned. For example, this `<div>` has both an `id` and an inline `style` attribute:"""
        TryEditor js: """
            div({id:"id-42"},
              'A div with id and style',
              {style:"color:purple"});
          """, cs:"""
            div id:"id-42",
              'A div with id and style',
              style:"color:purple"
          """

        md """To make life easier, style attributes can be set with `camelCase` in addition to `dashed-case`:"""
        TryEditor js: """
          div('A div with styling', {
            style:{
              fontSize:'25px',
              color:'royalblue'
            }
          });
          """, cs:"""
            div 'A div with styling',
              style:
                fontSize:'25px'
                color:'royalblue'
          """
    ,
      h: 'Creating CSS', id: 'creating-css', d: ->

        md """
          Like tag functions, CSS is defined by its own function: `oj.css`. It accepts an object of objects:
        """

        TryEditor js:"""
            css({
              div:{
                color:'red'
            }});

            div('This div is red');
          """, cs:"""
            css
              div:
                color:'red'

            div 'This div is red'
          """

        md """
          The `css` function fully supports selectors with `.classes`, `#ids`, `@media` queries, and nested definitions with `&`. Here is an example with classes and a nested hover selector:
        """
        TryEditor js:"""
            css({
              '.big':{
                fontSize:'25px',
                '&:hover':{
                  color:'blue',
                }
            }});

            div({'class':'big'},
              'This div is big');
          """, cs:"""
            css
              '.big':
                fontSize:'25px'
                '&:hover':
                  color:'blue'

            div 'class':'big',
              'This div is big'
          """

        md """
          The class attribute is abbreviated as `c`. OJ mostly eschews abbreviations, but 'class' is a pretty commonly accessed attribute and is a reserved keyword in JavaScript--so instead of cluttering the code with quotes around "class", OJ lets you use 'c' as well.
        """
        TryEditor js:"""
          css({
            '.big':{
              fontSize:'25px'
            },
            '.red':{
              color:'red'
            }
          });

          // c means class and handle strings or Arrays
          div({c:['big','red']},
            'This div is big and red');
        """, cs:"""
          css
            '.big':
              fontSize:'25px'
            '.red':
              color:'red'

          div 'c':['big','red'],
            'This div is big and red';
        """

        md """
          Nesting tags can be done a couple ways. The most powerful is to use a function:
        """
        TryEditor js: """
            ul(function(){
              li('Item 1');
              li('Item 2');
              li('Item 3');
              li('Item 4');
              li('Item 5');
            });
          """, cs: """
            ul ->
              li 'Item 1'
              li 'Item 2'
              li 'Item 3'
              li 'Item 4'
              li 'Item 5'
          """

        md """
          At first, the function notation seems a little verbose--but it's worth it because it allows structure to be created through code. Here is the same structure generated with a for loop:
        """
        TryEditor lineCount:6, js: """
            ul(function(){
              for (var n = 1; n <= 5; n++)
                li('Item ' + n);
            });
          """, cs: """
            ul ->
              for n in [1..5]
                li 'Item ' + n
          """

        md """
          Just to show the power, here is [FizzBuzz](http://imranontech.com/2007/01/24/using-fizzbuzz-to-find-developers-who-grok-coding/) =):
        """
        TryEditor lineCount:14, js: """
            ul(function(){
              for(var n = 1; n <= 15; n++) {

                // Calculate item
                var item = '';
                if(n % 3 === 0)
                  item += 'Fizz';
                if(n % 5 === 0)
                  item += 'Buzz';

                // Output item
                li(item || n);
              }
            });
          """, cs:"""
            ul ->
              for n in [1..15]

                # Calculate item
                item = '';
                if n % 3 == 0
                  item += 'Fizz'
                if n % 5 == 0
                  item += 'Buzz'

                # Output item
                li item || n
          """
    ,
      h: 'Creating JS', id: 'creating-js', d: ->

        md """
          OJ tag functions have built-in support for jQuery events. If any event is passed as an attribute it will be automatically bound. Here, the `oj.button` tag function binds `click`, `mouseenter`, and `mouseleave` events:
        """

        TryEditor js: """
          button('Click or hover me', {
            click:function(){
              alert('Click works');
            },
            mouseenter:function(e){
              $(this).css('color','royalblue')
            },
            mouseleave:function(e){
              $(this).css('color','orange')
            }
          });
        """, cs: """
          button 'Click or hover me',
            click: ->
              alert 'Click works'

            mouseenter: (e) ->
              $(@).css 'color','royalblue'

            mouseleave: (e) ->
              $(@).css 'color', 'orange'
        """

        md """
          The supported list of jQuery events are:

          * [keydown](http://api.jquery.com/keydown/) / [keyup](http://api.jquery.com/keyup/)
          * [mouseenter](http://api.jquery.com/mouseenter/) / [mouseleave](http://api.jquery.com/mouseleave/)
          * [mousedown](http://api.jquery.com/mousedown/) / [mouseup](http://api.jquery.com/mouseup/)
          * [click](http://api.jquery.com/click/)
          * [dblclick](http://api.jquery.com/dblclick/)
          * [change](http://api.jquery.com/change/)
          * [focus](http://api.jquery.com/focus/)
          * [focusout](http://api.jquery.com/focusout/)
          * [hover](http://api.jquery.com/hover/)
          * [scroll](http://api.jquery.com/scroll/)
          * [submit](http://api.jquery.com/submit/)
          * [resize](http://api.jquery.com/resize/) (window tags only)

          Here is an example of `keydown` / `keyup`:
        """
        TryEditor js: """
          input({
            placeholder:'Type here...',
            keyup:function(e){
              $('.status').html(
                'KEYUP code ' + e.keyCode);
            },
            keydown:function(e){
              $('.status').html(
                'KEYDOWN code ' + e.keyCode);
            }
          });

          div({c:'status'});
        """, cs: """
          input
            placeholder:'Type here...'

            keyup:(e) ->
              $('.status').html(
                'KEYUP code ' + e.keyCode)

            keydown:(e) ->
              $('.status').html(
                'KEYDOWN code ' + e.keyCode)

          div c:'status'
        """
        md """
          In addition OJ supports an `insert` event. It is specified the same way as the jQuery events above and triggers when a tag element is inserted in the page.

          This example shows an element triggering a fade-in animation when `insert` is detected:
        """
        TryEditor js: """
          Button('Click to Insert!', {
            click:function(){

            // Append content to body
            $('body').ojAppend(function(){
              p('Fades in when inserted!', {

                // Trigger when inserted
                insert:function(el){
                  $(el).fadeIn(1000)
                },

                // Start hidden
                style:{display:'none'}
              })
            })
          }})
        """, cs: """
          Button 'Click to Insert!',
            click: ->

              # Append content to body
              $('body').ojAppend ->
                p 'Fades in when inserted!',

                  # Trigger when inserted
                  insert: (el) ->
                    $(el).fadeIn(1000)

                  # Start hidden
                  style:
                    display:'none'
        """

        md """
          Just to be clear `insert` doesn't use the deprecated [DOMNodeInserted](https://forums.mozilla.org/addons/viewtopic.php?f=7&t=3180) or any of the [clever](http://www.backalleycoder.com/2012/04/25/i-want-a-damnodeinserted/) [hacks](http://davidwalsh.name/detect-node-insertion) that have emerged using CSS animation. Instead, OJ has full control over DOM element insertion so it can call events at the right time without special magic.
        """
    ,
      h: 'Using Objects', id: 'using-objects', d: ->
        md """
          OJ objects follow the standard JavaScript convention of capitalizing objects' class names. Hence `oj.button` is the tag function but `oj.Button` is the [Type](docs.html#Type). The biggest difference is that objects *remember their dom element* so they can change themselves or even remove themselves from the page.

          For example this [BulletList](docs.html#BulletList) instance can edit itself once inserted.
        """
        TryEditor lineCount:4, js:"""
          var myList = BulletList(1,2,3);

          myList.add('Added');
        """, cs: """
          myList = BulletList 1,2,3

          myList.add 'Added'
        """

        md """
          Notice that these objects don't use new. One of OJ's goals was to make Objects that can be used exactly like tag functions--so using div feels just the same as using a YouTubeVideo!

          Using 'new' has a special effect in OJ: it creates an element without emitting it--that is, without immediately adding it to the DOM. Once you're ready to inset the element, just call 'emit' and it'll appear!
        """

        TryEditor js:"""
          // Prevent it from appearing
          var myButton = new Button('Hello');

          div('Goodbye')

          // Emit causes it to appear
          myButton.emit();
        """, cs: """
          # Prevent it from appearing
          myButton = new Button 'Hello'

          div 'Goodbye'

          # Emit causes it to appear
          myButton.emit()
        """
        md """
          This lack of emitting is actually quite useful for when you want to customize an object and render it later. Take for example placing an [AceEditor](plugins.html#AceEditor) inside of a [Table](docs.html#Table):
        """
        TryEditor js:"""
          // Create & save editor for later
          var myEditor = new AceEditor(
            '<html>Is pretty</html>',{
            width:250, height:100,
            mode:'html', theme:'solarized_light',
          });

          Table(
            [1,2,       3],
            [4,myEditor,6],
            [7,8,       9]
          );
        """, cs: """
          # Create & save editor for later
          myEditor = new AceEditor(
            '<html>Is pretty</html>',
            width:250, height:100,
            mode:'html', theme:'solarized_light',
          );

          # Insert in a table
          Table(
            [1,2,       3]
            [4,myEditor,6]
            [7,8,       9]
          )
      """
      ]
  ,
    h: 'The Next Level', id: 'the-next-level', d: ->
    items: [
      h: 'Partials', id: 'partials', d: ->
        md """
          In OJ, partials are just functions. Let's create a function that makes twitter links:
        """
        TryEditor js: """

          function twitterLink(name, user){
            a('Follow ', name, {
              href:'http://twitter.com/' + user
            })
          }

          twitterLink('Evan', 'evanmoran');br();
          twitterLink('Laura', 'savinola');
        """, cs: """
          twitterLink = (name, user) ->
            a('Follow ', name, {
              href:'http://twitter.com/' + user
            })

          twitterLink 'Evan', 'evanmoran'
          br()
          twitterLink 'Laura', 'savinola'
        """
    ,
      h: 'Templates', id: 'templates', d: ->
        md """
          Just like partials, templates are also functions in OJ. The difference is that partials create parts of websites and templates create basic structure to fill in the rest.

          Lets create a template function that renders a header and takes the body and title as an argument:

        """
        TryEditor js: """
          // Create template function
          function pageWithHeader(theContent){
            doctype(5);
            html(function(){
              body(function(){
                header('THE GENERATED HEADER');
                // Call to place user content here
                theContent();
              });

              // Style the header
              css(
                {header:{
                  width:'100%',
                  textAlign:'center',
                  backgroundColor:'orange'
                }})
            });
          }

          // Create the page
          pageWithHeader(function(){
            h1('Template Rendering')
            p('The header is rendered automatically.')
          });
        """, cs: """
          # Create template function
          pageWithHeader = (theContent) ->
            doctype 5
            html ->
              body ->
                header 'THE GENERATED HEADER'
                # Call to place user content here
                theContent()

              # Style the header
              css
                header:
                  width:'100%'
                  textAlign:'center'
                  backgroundColor:'orange'

          # Create the page
          pageWithHeader ->
            h1 'Template Rendering'
            p 'The header is rendered automatically.'
        """

    ,
      h: 'Model Binding', id: 'models-binding', d: ->
        md """
          In the MVC sense, OJ is entirely focused on creating *Views* and nothing else. It doesn't create Models. It doesn't create Controllers or Routing, or help with Page Navigation or Server Syncing. Instead it tries to do only one thing well: make awesome View objects.

          That said, a good View should update from Models and vice versa. OJ supports two-way model binding to Backbone models by default. It depends on nothing other then on-off-trigger event syntax, so creating adapters to bind to other model systems should be straightforward.

          There are three kinds of model binding supported by OJ: [ModelKeyView](docs.html#ModelKeyView), [ModelView](docs.html#ModelView), and [CollectionView](docs.html#CollectionView). The first is used by form elements to bind to a part of a model, the second binds to an entire model, and the last binds to a collection of models.

          Here we use [ModelKeyView](docs.html#ModelKeyView) binding to link several controls together to the key of `name`. Changing one will change the model, which will then trigger a change in the rest:
        """

        TryEditor
          js: """
            // Create a User model
            var UserModel = Backbone.Model.extend({});

            // Create a user from the model
            var user = new UserModel({name:'Evan'});

            // Bind controls to the user's name
            TextBox({model:user, key:'name'});
            TextArea({model:user, key:'name'});
            ListBox({model:user, key:'name',
                     options:['', 'Brian','Evan','Sam']});
            CheckBox({model:user, key:'name'});
            Text({model:user, key:'name',tagName:'div'});

            // Create a button that sets the model directly
            Button('Set Model to Brian', {click:function(){
                user.set('name', 'Brian');
            }});

            // Add CSS to space the controls evenly
            css({
                '.oj-TextBox,.oj-TextArea,.oj-ListBox,.oj-Button,div':{
                    width:'200px',
                    margin:'20px 0',
                    display:'block'
                }
            });
          """
          cs: """
            # Create a User model
            class UserModel extends Backbone.Model

            # Create a user from the model
            user = new UserModel({name:'Evan', strength:9001});

            # Bind controls to the user's name
            TextBox model:user, key:'name'
            TextArea model:user, key:'name'
            ListBox model:user, key:'name',
              options:['', 'Brian','Evan','Sam']
            CheckBox model:user, key:'name'
            Text model:user, key:'name', tagName:'div'

            # Create a button that sets the model directly
            Button 'Set Model to Brian', click: ->
              user.set 'name', 'Brian'

            # Add CSS to space the controls evenly
            css
              '.oj-TextBox,.oj-TextArea,.oj-ListBox,.oj-Button,div':
                width:'200px'
                margin:'20px 0'
                display:'block'
          """
    ,
      h: 'Collection Binding', id: 'collection-binding', d: ->
        md """
          Another type of binding is [CollectionView](docs.html#CollectionView) binding. This is used most often to bind a collection of models to a [List](docs.html#List) or [Table](docs.html#Table), which inherit from [CollectionView](CollectionView).

          Similarly to Model Binding by default OJ understands binding to Backbone Collections. In this example, let's render a List from a collection of users:
        """
        TryEditor
          js: """
            // Create Model and Collection
            var UserModel = Backbone.Model.extend({});
            var UserCollection = Backbone.Collection.extend({
              model:UserModel});

            var users = new UserCollection([
              {name:'Batman', strength: 9000},
              {name:'Joker', strength: 837},
              {name:'Robin', strength: 1812}
            ]);

            BulletList({collection:users,
              each:function(model){
                TwitterButton(model.get('name'))
            }});
          """
          cs: """
            # Create Model and Collection
            class UserModel extends Backbone.Model
            class UserCollection extends Backbone.Collection
              model: UserModel

            users = new UserCollection([
              {name:'Batman', strength: 9000},
              {name:'Joker', strength: 837},
              {name:'Robin', strength: 1812}
            ]);

            BulletList collection:users,
              each: (model) ->
                TwitterButton model.get('name')
          """

        md """
          Let's use the same data to render a [Table](docs.html#Table). The only difference here is that the [each](docs.html#Table-each) function can set the cells directly.
        """

        TryEditor
          js: """
            // Create Model and Collection
            var UserModel = Backbone.Model.extend({});
            var UserCollection = Backbone.Collection.extend({
              model:UserModel});

            var users = new UserCollection([
              {name:'Batman', strength: 9000},
              {name:'Joker', strength: 837},
              {name:'Robin', strength: 1812}
            ]);

            Table({collection:users,
              each:function(model,cell){
                var name = model.get('name')
                cell(name);
                cell(model.get('strength'));
                cell(_TwitterButton(name));
              }})
          """
          cs: """
            # Create Model and Collection
            class UserModel extends Backbone.Model
            class UserCollection extends Backbone.Collection
              model: UserModel

            users = new UserCollection([
              {name:'Batman', strength: 9000},
              {name:'Joker', strength: 837},
              {name:'Robin', strength: 1812}
            ]);

            Table collection:users,
              each: (model,cell) ->
                name = model.get('name')
                cell name
                cell model.get('strength')
                cell _TwitterButton(name)
          """

    ,
      h: 'Creating Types', id: 'creating-types', d: ->

        md """
          Included in OJ is a sophisticated type system inspired by CoffeeScript. This lets you create types with:

          * Constructors
          * Single inheritance
          * Methods and Properties
          * Static Methods and Properties

          That said, OJ types have two big differences from CoffeeScript types:

          1.  OJ types work in JavaScript (CoffeeScript types only work in CoffeeScript)

              This is the big reason why OJ doesn't just use CoffeeScript types (though they are pretty great). OJ works in pure JavaScript and keeps the syntax as clean as possible.

          2.  OJ types directly support first-class properties. So if you choose, you can define properties with get / set methods to better abstract your data access.

              This brings front and center my favorite "new" feature of JavaScript, [first-class properties (ejohn.org)](http://ejohn.org/blog/ecmascript-5-objects-and-properties/). Even though properties have been in JavaScript since 2009, some devs still aren't aware of them. OJ builds these kind of properties right in.

          As an example of this powerful type system, let's create a Rectangle type that has properties `width` and `height`, with a readonly first-class property `area`:
        """

        TryEditor js:"""
          // Create Rectangle type
          var Rectangle = createType(
            'Rectangle', {

            // Construct with width and height
            constructor: function(w,h){
              this.width = w;
              this.height = h;
            },

            // Create properties
            properties: {
              width:null,
              height:null,

              // Area from width and height
              area: {
                get: function(){
                  return this.width *
                    this.height;
                }
              }
            }
          });

          // Instance it with new
          var myRect = new Rectangle(10,20);

          // Display the properties
          div('The width is: ', myRect.width);
          div('The height is: ', myRect.height);
          div('The area is: ', myRect.area);
          div(JSON.stringify(myRect));
        """, cs: """
          # Create Rectangle type
          Rectangle = createType 'Rectangle',

            # Construct with width and height
            constructor: (w,h) ->
              this.width = w
              this.height = h

            # Create properties
            properties:

              width:null
              height:null

              # Area from width and height
              area:
                get: ->
                  this.width * this.height

          # Instance it with new
          myRect = new Rectangle 10, 20

          # Display the properties
          div "The width is: \#{myRect.width}"
          div "The height is: \#{myRect.height}"
          div "The area is: \#{myRect.area}"
          div JSON.stringify(myRect)
        """
    ,
      h: 'Creating Plugins', id: 'creating-plugins', d: ->

        md """
          Plugins can be made in OJ by using [createType](docs.html#createType) and inheriting from [View](docs.html#View).

          In this example a new view is created called `OrangeButton`. This view contains default styling with CSS, and editing the `label` property will change its text.

          (Clearly this example is a bit contrived, but it does show how createType unifies HTML, CSS, and JS into a new View Object).

        """

        TryEditor js:"""
          // Create an OrangeButton view
          var OrangeButton = oj.createType(
            'OrangeButton', {

            // Inherit from oj.View
            base:View,

            // Construct by setting el
            constructor: function(text, options){

              // Set root element
              this.el = oj(function(){
                button();
              });

              // Call super's constructor
              OrangeButton.base.constructor.call(
                this, options);

              // Init the label from arguments
              this.label = text;
            },

            // Create the label property
            // to get/set the button's text
            properties: {
              label: {
                get:function(){
                  return this.$el.html();
                },
                set:function(v){
                  this.$el.html(v);
                }
              }
           }
          });

          // Define CSS for this object
          OrangeButton.css({
            border:'1px solid orange',
            borderRadius: '8px',
            backgroundColor: 'white',
            '&:hover': {
              border:'1px solid red'
            }
          });

          // Create an orange button
          // (the plugin works!)
          var myButton = OrangeButton(
            'Click My Orange Button...', {
            click: function(){
              myButton.label += ' (Woot!)';
            }
          });
        """, cs: """
          # Create an OrangeButton view
          OrangeButton = oj.createType(
            'OrangeButton'

            # Inherit from oj.View
            base:View

            # Construct by setting el
            constructor: (text, options) ->

              # Set root element
              this.el = oj ->
                button()

              # Call super's constructor
              OrangeButton.base.constructor.call(
                this, options)

              # Init the label from arguments
              this.label = text

            # Create the label property
            # to get/set the button's text
            properties:
              label:
                get: ->
                  this.$el.html()

                set:(v) ->
                  this.$el.html(v)
          );

          # Define CSS for this object
          OrangeButton.css
            border:'1px solid orange'
            borderRadius: '8px'
            backgroundColor: 'white'
            '&:hover':
              border:'1px solid red'

          # Create an orange button
          # (the plugin works!)
          myButton = OrangeButton(
            'Click My Orange Button...'
            click: ->
              myButton.label += ' (Woot!)'
          )
        """
    ]
]