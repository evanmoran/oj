# plugins.ojc

modules = require './modules'
_ = modules._

_template = require './_template'

{renderTOC, renderContent, renderProperties:properties, renderMethods:methods, renderEvents:events, renderInherits:inherits, renderOptions:options, renderArguments:arguments_,renderName:name} = require './_content'

md = markdown

module.exports = ->

  _template

    title: 'OJ Plugins - Unified Templating'

    styles: [
      'reset.css'
      'gg.css'
    ]

    scripts: [
      'jquery.js'
      'jquery.event.drag.js'
      'jquery.ba-resize.min.js'
      'underscore.js'
      'backbone.js'
      'coffee-script.js'
      'ace/ace.js'
    ]

    content: ->
      renderContent data

    toc: ->
      renderTOC data

    body: ->
    head: ->

data = [
    h: 'Introducing Plugins', id: 'introduction', d: """

      To me it all comes down to this quote:

      > Simple things should be simple,<br>complex things should be possible.<br>
      > -- [Alan Kay](http://en.wikipedia.org/wiki/Alan_Kay)

      OJ is all about making simple, self-contained objects. Everything in OJ was make to keep things simple. Simple to the user of the plugin, and simple to the plugin creator.

      Together we can increase what is possible.

      This list of plugins is not meant to be a complete list, or to fully document each plugin. Instead it is intending to provide a quick start guide to the most broadly used plugins.

      Pull requests with new plugins are very welcome!

    """
,
  h: 'Media Plugins', id: 'social-plugins', d: ->

      md """
        Media plugins help you embed media elements like video, sound and music.
      """
    items: [
      h: 'oj.YouTubeVideo', id: 'YouTubeVideo', d: ->
        md """
        """
        TryEditor lineCount: 12, js:"""
          YouTubeVideo('t-FUTp_oO5s');
        """, cs: """
          YouTubeVideo 't-FUTp_oO5s'
        """
        md """
          Usage:
        """
        TryEditor lineCount: 22, js:"""
          var vid = YouTubeVideo({
            video: 't-FUTp_oO5s',
            mute: false,
            autoplay: false,
              // Default false
            volume:0.5,
              // Number from 0-1
              // Default: 1
            width:300,
            height:170
          });

          Button('Play Toggle', {click:function(){
            vid.playToggle();
          }});

          Button('Mute Toggle', {click:function(){
            vid.muteToggle();
          }});

          Button('Stop', {click:function(){
            vid.stop();
          }});

        """, cs: """
          vid = YouTubeVideo(
            video: 't-FUTp_oO5s'
            mute: false
            autoplay: false
              # Default false
            volume:0.5,
              # Number from 0-1
              # Default: 1
            width:300
            height:170
          )

          Button 'Play Toggle',
            click: -> vid.playToggle()

          Button 'Mute Toggle',
            click: -> vid.muteToggle()

          Button 'Stop',
            click: -> vid.stop()
        """
    ,
      h: 'oj.VimeoVideo', id: 'VimeoVideo', d: ->
        md """
        """
        TryEditor lineCount: 10, js:"""
          VimeoVideo(24715531);
        """, cs: """
          VimeoVideo 24715531
        """
        md """
          Usage:
        """
        TryEditor lineCount: 10, js:"""
          VimeoVideo({
            video: 24715531,
            color: '#ff0000',
            showTitle: true,
            showByline: true,
            showPortrait: true,
            autoplay: false,
            width:300,
            height:178
          });
        """, cs: """
          VimeoVideo
            video: 24715531
            color: '#ff0000'
            showTitle: true
            showByline: true
            showPortrait: true
            autoplay: false
            width:300
            height:178
        """
    ,
      h: 'oj.JSFiddle', id: 'JSFiddle', d: ->
        md """
          An OJ plugin to embed a JSFiddle.

          The `url` property can take either the full `http://jsfiddle.net/custom/part` url or just the `custom/part`.

          The `tabs` property helps you specify the tab order.

          The `style` property customizes the visuals on JSFiddle's end.

          The `width` and  `height` properties are supported to customize size.
        """
        TryEditor lineCount: 10, js:"""
          JSFiddle('evanmoran/vhNcD');
        """, cs: """
          JSFiddle 'evanmoran/vhNcD'
        """
        md """
          Usage:
        """
        TryEditor lineCount: 20, js:"""
          JSFiddle({
            url:'evanmoran/v9b5v',
            tabs:'js,html,css,result,resources',
              // Comma seperated list
              // Default: 'result,js,html,css,resources'
            style:'',
              // Enum: '' or 'presentation'
              // Default: ''
            width:300,
            height:400
          });
        """, cs: """
          JSFiddle(
            url:'evanmoran/v9b5v'
            tabs:'js,html,css,resources,result'
              # Comma seperated list
              # Default: 'result,js,html,css,resources'
            style:''
              # Enum: '' or 'presentation'
              # Default: ''
            width:300
            height:400
          );
        """
    ]
,
  h: 'Social Plugins', id: 'social-plugins', d: ->

      md """
        Social plugins for following, liking, and upvoting.
      """
    items: [
      h: 'oj.TwitterButton', id: 'TwitterButton', d: ->

        TryEditor lineCount: 3, js:"""
            TwitterButton('evanmoran');
          """, cs: """
            TwitterButton 'evanmoran'
          """
        md """
          Usage:
        """
        TryEditor js:"""
            TwitterButton({
              username:'evanmoran',
              showCount: true,
              showUsername: true,
              showTailoring: true,
              size:'large'
            });
          """, cs: """
            TwitterButton
              username:'evanmoran'
              showCount: true
              showUsername: true
              showTailoring: true
              size:'large'
          """
    ,
      h: 'oj.GitHubButton', id: 'GitHubButton', d: ->

        md 'Follow Button:'
        TryEditor lineCount: 3, js:"""
            GitHubButton('evanmoran');
          """, cs: """
            GitHubButton 'evanmoran'
          """
        md 'Star Button:'
        TryEditor lineCount: 3, js:"""
            GitHubButton('ojjs','oj');
          """, cs: """
            GitHubButton 'ojjs','oj'
          """
        md 'Fork Button:'
        TryEditor lineCount: 3, js:"""
            GitHubButton('ojjs','oj', {
              type:'fork'
            });
          """, cs: """
            GitHubButton 'ojjs','oj',
              type:'fork'
          """
        md """
          All Properties:
        """
        TryEditor js:"""
          GitHubButton({
            username:'ojjs',
            repo:'oj',
            type:'star',
              // 'fork', 'star', or 'follow'
              // Default: 'follow'
            size:'large',
              // 'small', 'large'
              // Default: 'small'
            showCount:true,
            width: 400
          });
          """, cs: """
            GitHubButton
              username:'ojjs'
              repo:'oj'
              type:'star'
                # 'fork', 'star', or 'follow'
                # Default: 'follow'
              size:'large'
                # 'small' 'large'
                # Default: 'small'
              showCount:true
              width: 400
          """
      ]

,
  h: 'Form Plugins', id: 'social-plugins', d: ->

      md """
        Form plugins mimic and extend built-in form objects like [TextBox](docs.html#TextBox). These usually have two-way model binding and are intended to take input from a user.
      """
    items: [
      h: 'oj.AceEditor', id: 'AceEditor', d: ->
        md """
          Each argument is a line of code:
        """

        TryEditor lineCount: 10, js:"""
          AceEditor(
            '// JavaScript code',
            'function myFunction {',
            '\\treturn true;',
            '}'
          );
        """

        md """
          Usage:
        """

        TryEditor js:"""
          AceEditor(
            '// JavaScript code',
            'function myFunction {',
            '\treturn true;',
            '}', {

            // Basic settings
            readOnly: false,

            width: 310,
            height: 300,

            fontSize: 16,
            tabSize: 4,

            // Set language and coloring
            mode: 'javascript',
            theme: 'solarized_light',

            useSoftTabs:true,
              // Turn tabs to spaces
              // Default: false

            behaviorsEnabled:true,
              // Enable code completio
              // Default: true

            // Show a line where word
            // wrapping happens
            showPrintMargin:true,
            wrapLimit: 24,
              // 'auto' (limit to buffer)
              // 'off' (no limit)
              // <integer> (specific limit)

            // Show a 'fold' arrow to let
            // users collapse code sections
            showFoldWidgets:true,
              // Default: false
            foldStyle:'markbegin',
              // Default: 'markbegin'
              // 'markbegin'
              // 'markbeginend'
              // 'manual'
              fadeFoldWidgets:false,
              // Default: false

            // Show Guide lines for indenting
            showIndentGuides:true,
              // Default: true

            // Show invisible characters
            showInvisibles:true,
              // Default: false

            // Show line number gutter
            showGutter:true,
              // Default: false

            highlightSelectedWord:true,
              // Default: true

            highlightActiveLine:true,
              // Default: true

            selectionStyle:'text',
              // Default: 'line'
              // 'text' (stop at text)
              // 'line' (stop at line)

            animatedScroll:true,
              // Default: false

            hScrollBarAlwaysVisible:false,
              // Default: false

            vScrollBarAlwaysVisible:false,
              // Default: false

          });
        """

    ]
,
  h: 'Creation Plugins', id: 'creation-plugins', d: ->

      md """
        These plugins improve how you write content. Sometimes it is nice not to use tags directly, hence the [markdown](#markdown) plugin. Or you need to interface with legacy templating code, hense the [mustache](mustache) plugin.
      """
    items: [
      h: 'oj.markdown', id: 'markdown', d: ->
        md """
          *Author*: [Christopher Jeffrey](https://github.com/chjj)

          This plugin is a minimal wrapping of Christopher's excellent [marked](https://github.com/chjj/marked) JavaScript library. Show your love by starring his repo:
        """

        GitHubButton 'chjj', 'marked'
        br()
        md """
          Usage:
        """
        TryEditor lineCount:8, js:"""
          markdown(
            '# Markdown',
            'Markdown just *works*.',
            "* It's",
            '* <u>Pretty</u>',
            '* **Nice**'
          );
        """, cs:"""
          markdown \"\"\"
            # Markdown
            Markdown just *works*.
            * It's
            * <u>Pretty</u>
            * **Nice**
          \"\"\"
        """
        md """
          It supports the abbreviation `md`:
        """
        TryEditor lineCount:4, js:"""
          md(
            '## Short and Sweet'
          );
        """, cs:"""
          md \"\"\"
            '## Short and Sweet'
          \"\"\"
        """
    ,
      h: 'oj.mustache', id: 'mustache', d: ->

        md """
          *Maintainers*: [Nathan Stott](https://github.com/nrstott) and [Michael Jackson](https://github.com/mjijackson)

          This plugin wraps the main [mustache](https://github.com/chjj/marked) JavaScript library. Show that you care by starring the official repo:
        """
        GitHubButton 'janl', 'mustache.js'
        br()

        md """
          Usage:
        """
        TryEditor js:"""
          mustache(
            "<b>Hello {{name}}</b>",
            {name:'Evan'}
          );
        """, cs: """
          mustache(
            "<b>Hello {{name}}</b>",
            name:'Evan'
          )
        """

        md """
          JSON will be combined:
        """

        TryEditor js:"""
          mustache(
            {name:'Evan'},
            "{{name}}'s strength is ",
            {strength:'9000'},
            "over {{strength}}!"
          );
        """, cs: """
          mustache
            {name:'Evan'}
            "{{name}}'s strength is "
            {strength:'9000'}
            "over {{strength}}!"
        """

    ]
]